<?php
// $Id$

/**
 * hook_menu
 */
function get_image_menu(){
  $items = array();
  $items['admin/settings/get_image'] = array(
    'title' => 'Get Image',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_image_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

/**
 * hook_nodeapi
 */
function get_image_nodeapi(&$node, $op) {
  switch ($op) {
    case 'presave':
      if(variable_get('get_image_'.$node->type, 0) && $node->body){
        $node->body = preg_replace_callback('/(<img.*?src=")(.*?)"/ms', '_get_image_save', $node->body);
        $node->teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL);
      }
  }
}

/**
 * save image
 * 保存远程图片
 */
function _get_image_save($mat){
	static $files;
	if(!isset($files[$mat[2]])){
	  if(!strstr($mat[2], $GLOBALS['base_url']) && strstr($mat[2], 'http://')){
	    if($data = @file_get_contents($mat[2])){
	      $filename = end(explode('/', $mat[2]));
	      
	      if($path = get_image_path()){
		      $file = file_save_data($data, $path.'/'.$filename);
		      
		      drupal_set_message(t('Save "@name" success', array('@name' => $mat[2])));
		      
		      if(variable_get('get_image_absolute', 0)){
		      	$file = $GLOBALS['base_url'] . $GLOBALS['base_path'] . $file;
		      }else{
		      	$file = $GLOBALS['base_path'] . $file;
		      }
		      
		      $files[$mat[2]] = $mat[1] . $file.'"';
	      }else{
	      	drupal_set_message(t('Save "@name" failed', array('@name' => $mat[2])), 'error');
	      	$files[$mat[2]] = $mat[0];
	      }
	    }else{
	    	$files[$mat[2]] = $mat[0];
	    }
	  }else{
	  	$files[$mat[2]] = $mat[0];
	  }
  }
  return $files[$mat[2]];
}

/**
 * create folder
 * 创建文件夹
 */
function get_image_path() {
	global $user;
	$path = array();
	if(!variable_get('get_image_path', 0)){
		$path[] = 'get_image';
	}else{
		$mm = format_date(time(), 'custom', "Y|m|d");
    $m = explode('|', $mm);
		$a = array('%uid' => $user->uid, '%username' => $user->name, '%Y' => $m[0], '%m' => $m[1], '%d' => $m[2]);
		$b = strtr(variable_get('get_image_path', 'get_image'), $a);
		$path = explode('/',$b);
	}

	$dirs = array();
	foreach($path as $folder) {
		$dirs[] = $folder;
		$t = file_create_path(file_directory_path().'/' .implode("/", $dirs));
		if (!file_check_directory($t, FILE_CREATE_DIRECTORY)) {
			return false;
		}
	}
	return file_directory_path().'/' .$b;
}

/**
 * settings
 * 设置图片保存位置
 */
function get_image_settings_form() {
	$form['get_image_path'] = array(
		'#type'=> 'textfield',
		'#title' => t('Path of saving'),
		'#default_value' => variable_get('get_image_path', 'get_image'),
		'#description' => t('The path where the files should be saved, may save by user id or user name or time, e.g.: get_image/%uid or photos/%username or image/%Y/%m/%d. Available variables: %uid, %username, %Y, %m, %d.'),
		'#size' => '40',
		'#required' => TRUE,
	);
	
	$form['get_image_absolute'] = array(
		'#title' => t('Absolute path'),
		'#type' => 'checkbox',
		'#description' => t('View %absolute or %relative', array('%absolute' => $GLOBALS['base_url'] . $GLOBALS['base_path'] . 'files/1.jpg', '%relative' => $GLOBALS['base_path'] . 'files/1.jpg')),
		'#default_value' => variable_get('get_image_absolute', 0),
	);
	
  $types = node_get_types();
  
  foreach ($types as $type){
  	$form['get_image_'.$type->type] = array(
  		'#title' => $type->name,
  		'#type' => 'checkbox',
  		'#default_value' => variable_get('get_image_'.$type->type, 0),
  	);
  }
  
	return system_settings_form($form);
}